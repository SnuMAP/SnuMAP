#!/usr/bin/env python

import time

import matplotlib.pyplot as plt
import numpy as np

animate = False 

try:
    plt.style.use('ggplot')
except Exception:
    pass

from matplotlib import cm
import sys
import os


def pseudocolor(val, minval, maxval):
    """
    Returns a RGB text format color based on a range of values and a given value
    :param val: value to select a color based on
    :param minval: min value in range
    :param maxval: max value in range
    :return: Hex. color representation
    """
    f = float(val - minval) / (maxval - minval)
    r, g, b = [cm.Paired(f)[i] for i in range(0, 3)]
    return '#%02X%02X%02X'% (int(r*255), int(g*255), int(b*255))

def preprocess(filename):
    """
    Pre-process a given file by erasing all the lines that do not contribute important information.
    ie: start and end time is the same
    :param filename: given file name
    """
    tmp_filename = ".tmp.csv"
    with open(tmp_filename, 'w') as tmp_f:
        with open(filename, 'r') as f:
            for line in f:
                items = line.split("\t")
                start = int(items[1])
                end = int(items[2])
                # Only use meaningful lines and find min_jiffies
                if(end > start):
                    tmp_f.write(line)
    
    os.system("mv " + tmp_filename + " " + filename)


init_clk = time.clock()

if(len(sys.argv) == 3):
    try:
        animate = int(sys.argv[2])
    except Exception:
        print("Error reading animate flag.\n Usage snumap-mplot-callinfo trace.csv animate(0/1)")

trace_filename = sys.argv[1]
preprocess(trace_filename)
callinfo_filename = '.'.join(trace_filename.split(".")[:-1]) + ".call_info.csv"

# get data from file
arr_core, arr_start, arr_end = np.loadtxt(trace_filename, usecols=(0,1,2), unpack=True)
call_arr_id, call_arr_start, call_arr_end = np.loadtxt(callinfo_filename, usecols=(2, 3, 4), unpack=True)
call_arr_addr = np.genfromtxt(callinfo_filename, dtype='|S10', usecols=(1), unpack=True)

# compute some values from imported data
max_core = np.max(arr_core)
min_jiffies = np.min(arr_start)
max_call_id = np.max(call_arr_id)
min_call_id = np.min(call_arr_id)

# start off at 0 
arr_start = arr_start - min_jiffies
arr_end  = arr_end - min_jiffies 
call_arr_start = call_arr_start - min_jiffies
call_arr_end = call_arr_end - min_jiffies


if(animate):
    plt.ion()  # interactive mode

plt.yticks(np.arange(-1, max_core + 2))
plt.xlabel("Time (increases with Jiffies)")
plt.ylabel("Cores")
plt.title("Core vs. Time (Call info) \n " + sys.argv[1].split("/")[-1])

# XXX: No need to show underlying trace information. Parallel sections are enough
# l = plt.hlines(arr_core, arr_start, arr_end, lw=10, colors='#000000')
# l.set_label("Trace")
# plt.legend(loc='upper left', bbox_to_anchor=(1,1))
# plt.pause(1)


# XXX: Naive approach. Generate a dictionary of parallel section calls using the parallel section id as index
# TODO: Improve speed can become a bottleneck
call_info_dic = {}

color_idx = 0
loop_clk = time.clock()
for core, start, end in np.nditer([arr_core, arr_start, arr_end]):
    for call_addr, call_id, call_start, call_end in np.nditer([call_arr_addr, call_arr_id, call_arr_start, call_arr_end]):
        # if(call_start <= start and call_end >= end):
        # if(call_start <= start and call_end >= end) or (call_start >= start and call_end <= end):
        call_id = int(call_id)
        if(call_id != 0) and (start > call_start) and (start < call_end):
            if(call_id in call_info_dic):
                call_info_dic[call_id][0].append(start)
                call_info_dic[call_id][1].append(end)
                call_info_dic[call_id][2].append(core)
            else:
                call_info_dic[call_id] = [[], [], [], "", 0]
                call_info_dic[call_id][0] = [start]
                call_info_dic[call_id][1] = [end]
                call_info_dic[call_id][2] = [core]
                call_info_dic[call_id][3] = call_addr
                call_info_dic[call_id][4] = color_idx 
                color_idx += 1
print('Computed main dictionary: ' + str(time.clock() - loop_clk))

# generate color per call id
colors = []
for i in xrange(int(max_call_id) + 1):
    colors.append(pseudocolor(i + 1, 1, color_idx + 1))

# Draw a set of lines per parallel section 
for key, val in call_info_dic.iteritems():
    l = plt.hlines(val[2], val[0], val[1], lw=16, color=colors[val[4]])
    l.set_label('0x' + str(val[3]))
    # l.set_alpha(0.5)
    if(animate):
        plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
        plt.pause(0.5)

print('Elapsed time:' + str(time.clock() - init_clk))

# maximize window
# mng = plt.get_current_fig_manager()
# try:
#     mng.window.showMaximized()
# except AttributeError:
#     try:
#         mng.resize(*mng.window.maxsize())
#     except AttributeError:
#         print("Couldn't maximize the window, check your matplotlib backend")

if(animate):
    while True:
        plt.pause(0.05)
else:
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
    plt.show()
