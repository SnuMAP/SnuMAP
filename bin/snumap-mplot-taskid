#!/usr/bin/env python

import time

import matplotlib.pyplot as plt
import numpy as np

try:
    plt.style.use('ggplot')
except Exception:
    pass

from matplotlib import cm
import sys
import os


def pseudocolor(val, minval, maxval):
    """
    Returns a RGB text format color based on a range of values and a given value
    :param val: value to select a color based on
    :param minval: min value in range
    :param maxval: max value in range
    :return: Hex. color representation
    """
    f = float(val - minval) / (maxval - minval)
    r, g, b = [cm.Paired(f)[i] for i in range(0, 3)]
    return '#%02X%02X%02X'% (int(r*255), int(g*255), int(b*255))


def preprocess(filename):
    """
    Precess a given file by erasing all the lines that do not contribute important information.
    ie: start and end time is the same
    :param filename: given file name
    """
    tmp_filename = ".tmp.csv"
    with open(tmp_filename, 'w') as tmp_f:
        with open(filename, 'r') as f:
            for line in f:
                items = line.split("\t")
                start = int(items[1])
                end = int(items[2])
                # Only use meaningful lines and find min_jiffies
                if(end > start):
                    tmp_f.write(line)
    os.system("mv " + tmp_filename + " " + filename)

init_clk = time.clock()

# only allow one file
if(len(sys.argv) < 2 or len(sys.argv) > 2):
    print("usage: snumap-plot-taskid <trace.csv>")
    sys.exit(1)

filename = sys.argv[1]

# remove unnecesary lines from trace file
preprocess(filename)

# get data from file
arr_core, arr_start, arr_end, arr_taskid = np.loadtxt(filename, usecols=(0, 1, 2, 4), unpack=True)

# compute some values from imported data
min_taskid = np.min(arr_taskid)
max_taskid = np.max(arr_taskid)
max_core = np.max(arr_core)
min_jiffies = np.min(arr_start)

# start off at 0
arr_start = arr_start - min_jiffies
arr_end  = arr_end - min_jiffies 

# generate colors once
colors = {}
for i in np.arange(min_taskid, max_taskid + 1):
    colors[i] = pseudocolor(i, min_taskid, max_taskid)

# generate color per taskid
color_mapper = np.vectorize(lambda x: colors[int(x)])

# plot "gantt" like plot
plt.hlines(arr_core, arr_start, arr_end, linewidth=15, colors=color_mapper(arr_taskid))

plt.yticks(np.arange(-1, max_core + 2))
plt.xlabel("Time (increases with Jiffies)")
plt.ylabel("Cores")
plt.title("Core vs. Time (Task ID) \n"  + sys.argv[1].split("/")[-1])

print('Elapsed time:' + str(time.clock() - init_clk))

# maximize window
mng = plt.get_current_fig_manager()

# mng.full_screen_toggle()

# try:
#     mng.window.showMaximized()
# except AttributeError:
#     try:
#         mng.resize(*mng.window.maxsize())
#     except AttributeError:
#         print("Couldn't maximize the window, check your matplotlib backend")

plt.show()
