#!/usr/bin/env python

import commands, subprocess, re, time, sys, csv
import datetime
from os.path import exists
import os
import itertools
import sys

number_re = "+([0-9]+\.[01-9]+|[0-9]+)"

commands.getoutput("cp $SNUMAP_ROOT/bin/gantt-call-info.py .")

jiffies_to_msec = 1

min_jiffies = 99999999999
for  i in range(1, len(sys.argv), 1):
    with open(sys.argv[i]) as f:
        for line in f.readlines():
            items = line.split()
            if int(items[1]) < int(min_jiffies):
                min_jiffies = items[i]

print min_jiffies

input_file = "merge-log.csv"
input_stream = open(input_file, "w+")

for i in range(1, len(sys.argv), 1):
    with open(sys.argv[i], "r") as f:
        call_info_available = 0
        file_ = sys.argv[i][0:len(sys.argv[i])-4]
        file_ += ".call_info.csv"
        print file_
        id_ = []
        start_ = []
        end_ = []
        with open(file_, "r") as ff:
            for lline in ff.readlines():
                items = lline.split()
                id_.append(items[1])
                start_.append(int(items[3]))
                end_.append(int(items[4])-1)
                call_info_available = 1

        for line in f.readlines():
            items = line.split()
            strline = items[0] + " "
            strline += str((float(items[1]) - float(min_jiffies))/jiffies_to_msec) + " "
            strline += str((float(items[2]) - float(min_jiffies))/jiffies_to_msec) + " "

            if call_info_available is 0:
                strline += items[3] + "\n"
            else:
                is_identified = 0
                for j in range(len(id_)):
                    if int(items[1]) > start_[j] and int(items[1]) < end_[j]:
                        strline += items[3] + "_" + id_[j] + "\n"
                        is_identified = 1
                        break
                if is_identified is 0:
                    strline += items[3] + "_0" + "\n"
            input_stream.write(strline)

input_stream.close()

# generate gpl file
gplfile = "merge-log.gpl"
gpl_gen = "python gantt-call-info.py -i -o " + gplfile + " " + input_file
commands.getoutput(gpl_gen)
input_delete =  "rm " + input_file
commands.getoutput(input_delete)

# generate gantt chart by gnuplot with command line argument
epsfile = "output-call-info.eps"
gantt_gnuplot = "gnuplot -e " + "\"set terminal postscript eps color solid\"" + \
                " -e " + "\"set output '" + epsfile + "'\"" + \
                " -e " + "\"load '" + gplfile + "'\"" + \
                " -e " + "\"unset output\""

#print gantt_gnuplot
commands.getoutput(gantt_gnuplot)

gpl_delete = "rm " + gplfile
commands.getoutput(gpl_delete)

commands.getoutput("rm gantt-call-info.py")

commands.getoutput("epstopdf output-call-info.eps")
